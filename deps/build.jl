using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcsfml-graphics"], :libcsfml_graphics),
    LibraryProduct(prefix, ["libsfml-window"], :libsfml_window),
    LibraryProduct(prefix, ["libsfml-audio"], :libsfml_audio),
    LibraryProduct(prefix, ["libsfml-network"], :libsfml_network),
    LibraryProduct(prefix, ["libsfml-system"], :libsfml_system),
    LibraryProduct(prefix, ["libsfml-graphics"], :libsfml_graphics),
    # LibraryProduct(prefix, ["libopenal32"], :libopenal32),
    LibraryProduct(prefix, ["libcsfml-system"], :libcsfml_system),
    LibraryProduct(prefix, ["libcsfml-network"], :libcsfml_network),
    LibraryProduct(prefix, ["libcsfml-window"], :libcsfml_window),
    LibraryProduct(prefix, ["libcsfml-audio"], :libcsfml_audio),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/Gnimuc/SFMLBuilder/releases/download/v2.5-1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Windows(:i686) => ("$bin_prefix/SFML.v2.5.1.i686-w64-mingw32.tar.gz", "80d9d18a223479eb5b0d073f89284ac67726d20f2f0eb7a938f9c0935bddf7fb"),
    MacOS(:x86_64) => ("$bin_prefix/SFML.v2.5.1.x86_64-apple-darwin14.tar.gz", "e246aaa9d9add42e64f026bc9efc6f8cee6da051f043182ed0340331cadbebcc"),
    Windows(:x86_64) => ("$bin_prefix/SFML.v2.5.1.x86_64-w64-mingw32.tar.gz", "42e0fff3c17434e1366bc1330b29aa8183ef0b00f035f3f0efa8bbbfa89dead6"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
